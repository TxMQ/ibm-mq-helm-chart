kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-{{ .Values.qmspec.qmconf.name }}
  finalizers: []
  labels:
    {{- include "mqchart.labels" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: qmgr
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      {{- include "mqchart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      finalizers: []
      labels:
        {{- include "mqchart.labels" . | nindent 8 }}
      annotations:
        # inject, there could be more annotations
        productVersion: {{ .Values.qmspec.version }}
        productName: "IBM MQ Advanced"
        productID: "208423bb063c43288328b1d788745b0c"
        productChargedContainers: {{ .Release.Name }}-{{ .Values.qmspec.qmconf.name }}-0
        productMetric: VIRTUAL_PROCESSOR_CORE 
        checksum/config: {{ include (print $.Template.BasePath "/mqsc-config-map.yaml") . | sha256sum }}
    spec:
      # inject
      {{- with .Values.qmspec.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccount: {{.Release.Name}}-{{.Values.qmspec.serviceAccount.name}}
      serviceAccountName: {{.Release.Name}}-{{.Values.qmspec.serviceAccount.name}}
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      # inject
      {{- with .Values.qmspec.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: mq-mq-qmgr
          # inject
          image: {{ .Values.qmspec.qmconf.image | squote }}
          # inject
          imagePullPolicy: {{ default "IfNotPresent" .Values.qmspec.qmconf.imagePullPolicy }}
#          terminationMessagePolicy: File
#          terminationMessagePath: /run/termination-log
          {{- if .Values.resources }}
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: /ready
              port: 40000
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 1
          livenessProbe:
            httpGet:
              path: /healthy
              port: 40000
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 1
          # environemnt variables
          env:
            - name: MQ_QMGR_NAME
              value: {{ .Values.qmspec.qmconf.name | quote }}
            - name: MQ_ENABLE_TLS
              value: "1"
          securityContext:
            readOnlyRootFilesystem: false
            runAsUser: 1001
            runAsGroup: 1001
          ports:
            - containerPort: 1414
              protocol: TCP
            - containerPort: 9157
              protocol: TCP
            - containerPort: 9443
              protocol: TCP
          volumeMounts:
            - mountPath: /mnt/mqm/data
              name: mqmdata
            - mountPath: /etc/mqm/mqsc
              name: mqsc-ini
            - mountPath: /etc/mqm/pki/cert
              name: qm-tls
            - mountPath: /etc/mqm/webuser
              name: webuser
#            - name: oidc-certificate
#              mountPath: /etc/mqm/pki/trust/default
#            - name: zen-ca-certificate
#              mountPath: /etc/mqm/pki/trust/zenca
      volumes:
        - name: mqmdata
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-{{ .Values.qmspec.qmconf.storage.pvcName }}
        - name: mqsc-ini
          configMap:
            name: mqsc-ini-{{ .Release.Name }}
        - name: webuser
          configMap:
            name: webuser-{{ .Release.Name }}
        - name: qm-tls
          secret:
            secretName: {{ .Values.qmspec.pki.tlsSecretName }}
#        - name: oidc-certificate
#          secret:
#            secretName: ibmcloud-cluster-ca-cert
#            items:
#              - key: ca.crt
#                path: OIDC_CERTIFICATE.crt
#            defaultMode: 420
#        - name: zen-ca-certificate
#          secret:
#            secretName: internal-nginx-svc-tls
#            items:
#              - key: tls.crt
#                path: ZEN_CERTIFICATE.crt
#            defaultMode: 420
