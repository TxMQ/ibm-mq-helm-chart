{{- define "mq.qmgr"}}
  alter qmgr chlauth(enabled) +
  alter qmgr monchl(medium) +
  alter qmgr monq(medium) +
  alter qmgr perfmev(enabled) +
  alter qmgr remoteev(enabled) +
  alter qmgr sslev(enabled) +
  alter qmgr schinit(qmgr) +
  alter qmgr scmdserv(qmgr) +
  alter qmgr statchl(medium) +
  alter qmgr statq(on) +
  alter qmgr statmqi(on) +
  alter qmgr strstpev(enabled)
{{- end }}
#
{{- define "mq.ldap" }}
    ALTER QMGR CONNAUTH(USE.LDAP)
    *
    DEFINE AUTHINFO(USE.LDAP) +
    AUTHTYPE(idpwldap) +
    REPLACE +
    ADOPTCTX(yes) +
    AUTHORMD(searchgrp) +
    BASEDNG({{ .groups.groupSearchBaseDn | squote }}) +
    BASEDNU({{ .users.userSearchBaseDn  | squote }}) +
    CLASSGRP({{ .groups.objectClass }}) +
    CLASSUSR({{ .users.objectClass }}) +
    CONNAME('{{ .connect.ldapHost }}({{ .connect.ldapPort }})') +
    CHCKCLNT(required) +
    CHCKLOCL(optional) +
    DESCR('ldap authinfo') +
    FAILDLAY(1) +
    FINDGRP({{ .groups.groupMembershipAttr }}) +
    GRPFIELD({{ .groups.groupNameAttr }}) +
    LDAPPWD({{ .connect.bindPasswordSecret | squote }}) +
    LDAPUSER({{ .connect.bindDn | squote }}) +
    NESTGRP(yes) +
    SECCOMM(no) +
    SHORTUSR({{ .users.shortUserNameAttr }}) +
    USRFIELD({{ .users.userNameAttr }});
    *
    REFRESH SECURITY TYPE(CONNAUTH)
{{- end }}
#
{{- define "mq.svrconn" }}
    DEFINE CHANNEL({{ .name }}) +
    CHLTYPE(SVRCONN) +
    DESCR({{ default "svrconn channel" .description | squote }}) +
    TRPTYPE(TCP) +
    REPLACE +
    DISCINT(0) +
    HBINT(300) +
    KAINT(AUTO) +
    MAXINST(100000) +
    MAXINSTC(1000) +
    MAXMSGL(4096) +
    MONCHL(QMGR) +
    SHARECNV(100000) +
    {{- if eq .tls.enable true }}
    {{- if eq .tls.clientauth true }}
    SSLCAUTH(required) +
    {{- else }}
    SSLCAUTH(optional) +
    {{- end }}
    SSLCIPH(ANY_TLS12_OR_HIGHER);
    {{- else }}
    SSLCAUTH(none);
    {{- end }}
    *
    SET CHLAUTH({{ .name }}) +
    TYPE(ADDRESSMAP) +
    ADDRESS(*) +
    USERSRC(CHANNEL);
{{- end }}
#
{{- define "mq.chlauth" }}
  {{- $chl := .}}
  {{- range $ip := $chl.access.blockip }}
  SET CHLAUTH({{$chl.name | squote }}) TYPE(addressmap) ADDRESS({{$ip | squote}}) USERSRC(noaccess)
  {{- end }}
  {{- range $user := $chl.access.blockuser }}
  SET CHLAUTH({{$chl.name | squote }}) TYPE(blockuser) USERLIST({{$user | squote }})
  {{- end }}
{{- end }}
#
{{- define "mq.authrec" }}
    {{- $profile := .profile }}
    {{- $objtype := .objtype }}
    {{- range $aut := .authority }}
    {{- if $aut.grant }}
    {{- range $grant := $aut.grant }}
    {{- if $aut.group }}
    {{- range $group := $aut.group }}
    SET AUTHREC PROFILE({{ $profile }}) OBJTYPE({{ $objtype }}) GROUP({{ $group }}) AUTHADD({{ $grant }})
    {{- end }}
    {{- end }}
    {{- if $aut.principal }}
    {{- range $principal := $aut.principal }}
    SET AUTHREC PROFILE({{ $profile }}) OBJTYPE({{ $objtype }}) PRINCIPAL({{ $principal }}) AUTHADD({{ $grant }})
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- if $aut.revoke }}
    {{- range $revoke := $aut.revoke }}
    {{- if $aut.group }}
    {{- range $group := $aut.group }}
    SET AUTHREC PROFILE({{ $profile }}) OBJTYPE({{ $objtype }}) GROUP({{ $group }}) AUTHRMV({{ $revoke }})
    {{- end }}
    {{- end }}
    {{- if $aut.principal }}
    {{- range $principal := $aut.principal }}
    SET AUTHREC PROFILE({{ $profile }}) OBJTYPE({{ $objtype }}) PRINCIPAL({{ $principal }}) AUTHRMV({{ $revoke }})
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}
{{- end }}
#
{{- define "mq.qlocal" }}
  DEFINE QLOCAL({{ .name }}) +
  DESCR({{default "local queue" .descr }}) +
  REPLACE +
  MON(QMGR) +
  STATQ(QMGR) +
  PUT({{ default "ENABLED" .put }}) +
  GET({{ default "ENABLED" .get }}) +
  USAGE(NORMAL) +
  ACCTQ(ON) +
  {{- if .priority }}
  MSGDLVSQ(PRIORITY) +
  {{- else }}
  MSGDLVSQ(FIFO) +
  {{- end }}
  {{- if .defaultpri }}
  DEFPRTY({{.defaultpri}}) +
  {{- end }}
  {{- if .defaultpersistence }}
  DEFPSIST(YES) +
  {{- else }}
  DEFPSIST(NO) +
  {{- end }}
  {{- if not .trigger }}
  NOTRIGGER +
  {{- end }}
  {{- if .initq }}
  INITQ({{.initq}}) +
  {{- end }}
  MAXDEPTH({{ default "5000" .maxdepth }}) +
  MAXMSGL({{ default 4194304 .maxmsglen }})
{{- end }}
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: mqsc-ini-{{ .Release.Name }}
data:
  mqsc: |-
    *
    * ldap auth
    *
    {{- if .Values.auth.ldap }}
    {{- include "mq.ldap" .Values.auth.ldap }}
    {{- end }}

    *
    * queue manager
    *

    *
    * svrconn channels
    *
    {{- range $ch := .Values.svrconn }}
    {{- include "mq.svrconn" $ch }}
    {{- end }}

    *
    * svrconn chlauth
    *
    {{- range $svrconn := .Values.svrconn }}
    {{- $chl := dict "name" $svrconn.name "access" $svrconn.access }}
    {{- include "mq.chlauth" $chl | indent 2 }}
    {{- end }}

    *
    * local queues
    *
    {{- range $lq := .Values.localqueue -}}
    {{- end }}

    *
    * queue manager authrec
    *
    {{- $aut := dict "objtype" "qmgr" "profile" .Values.qmgr.name "authority" .Values.qmgr.authority }}
    {{- include "mq.authrec" $aut }}

    *
    * svrconn authrec
    *
    {{- range $ch := .Values.svrconn }}
    {{- $aut := dict "objtype" "channel" "profile" $ch.name "authority" $ch.authority }}
    {{- include "mq.authrec" $aut }}
    {{- end }}

    *
    * local queues authrec
    *
    {{- range $lq := .Values.localqueue -}}
    {{- $aut := dict "objtype" "queue" "profile" $lq.name "authority" $lq.authority }}
    {{- include "mq.authrec" $aut }}
    {{- end -}}
    
